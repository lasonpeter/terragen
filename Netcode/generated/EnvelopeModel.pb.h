// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EnvelopeModel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EnvelopeModel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EnvelopeModel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EnvelopeModel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EnvelopeModel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EnvelopeModel_2eproto;
namespace terragen {
class EnvelopeModel;
struct EnvelopeModelDefaultTypeInternal;
extern EnvelopeModelDefaultTypeInternal _EnvelopeModel_default_instance_;
}  // namespace terragen
PROTOBUF_NAMESPACE_OPEN
template<> ::terragen::EnvelopeModel* Arena::CreateMaybeMessage<::terragen::EnvelopeModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace terragen {

enum MessageType : int {
  UNDEFINED = 0,
  LOGIN = 1,
  LOGIN_RESPONSE = 2,
  DISCONNECT = 3,
  CHAT = 4,
  CHAT_BROADCAST = 5,
  POSITION_UPDATE = 6,
  POSITION_UPDATE_BROADCAST = 7,
  BLOCK_UPDATE = 8,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = UNDEFINED;
constexpr MessageType MessageType_MAX = BLOCK_UPDATE;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class EnvelopeModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:terragen.EnvelopeModel) */ {
 public:
  inline EnvelopeModel() : EnvelopeModel(nullptr) {}
  ~EnvelopeModel() override;
  explicit PROTOBUF_CONSTEXPR EnvelopeModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnvelopeModel(const EnvelopeModel& from);
  EnvelopeModel(EnvelopeModel&& from) noexcept
    : EnvelopeModel() {
    *this = ::std::move(from);
  }

  inline EnvelopeModel& operator=(const EnvelopeModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvelopeModel& operator=(EnvelopeModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnvelopeModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnvelopeModel* internal_default_instance() {
    return reinterpret_cast<const EnvelopeModel*>(
               &_EnvelopeModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnvelopeModel& a, EnvelopeModel& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvelopeModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvelopeModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnvelopeModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnvelopeModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnvelopeModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnvelopeModel& from) {
    EnvelopeModel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvelopeModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "terragen.EnvelopeModel";
  }
  protected:
  explicit EnvelopeModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPayLoadFieldNumber = 5,
    kPocketIdFieldNumber = 2,
    kPocketsCountFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes PayLoad = 5;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // int32 PocketId = 2;
  void clear_pocketid();
  int32_t pocketid() const;
  void set_pocketid(int32_t value);
  private:
  int32_t _internal_pocketid() const;
  void _internal_set_pocketid(int32_t value);
  public:

  // int32 PocketsCount = 3;
  void clear_pocketscount();
  int32_t pocketscount() const;
  void set_pocketscount(int32_t value);
  private:
  int32_t _internal_pocketscount() const;
  void _internal_set_pocketscount(int32_t value);
  public:

  // .terragen.MessageType Type = 4;
  void clear_type();
  ::terragen::MessageType type() const;
  void set_type(::terragen::MessageType value);
  private:
  ::terragen::MessageType _internal_type() const;
  void _internal_set_type(::terragen::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:terragen.EnvelopeModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    int32_t pocketid_;
    int32_t pocketscount_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_EnvelopeModel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnvelopeModel

// string Id = 1;
inline void EnvelopeModel::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& EnvelopeModel::id() const {
  // @@protoc_insertion_point(field_get:terragen.EnvelopeModel.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnvelopeModel::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:terragen.EnvelopeModel.Id)
}
inline std::string* EnvelopeModel::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:terragen.EnvelopeModel.Id)
  return _s;
}
inline const std::string& EnvelopeModel::_internal_id() const {
  return _impl_.id_.Get();
}
inline void EnvelopeModel::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* EnvelopeModel::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* EnvelopeModel::release_id() {
  // @@protoc_insertion_point(field_release:terragen.EnvelopeModel.Id)
  return _impl_.id_.Release();
}
inline void EnvelopeModel::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:terragen.EnvelopeModel.Id)
}

// int32 PocketId = 2;
inline void EnvelopeModel::clear_pocketid() {
  _impl_.pocketid_ = 0;
}
inline int32_t EnvelopeModel::_internal_pocketid() const {
  return _impl_.pocketid_;
}
inline int32_t EnvelopeModel::pocketid() const {
  // @@protoc_insertion_point(field_get:terragen.EnvelopeModel.PocketId)
  return _internal_pocketid();
}
inline void EnvelopeModel::_internal_set_pocketid(int32_t value) {
  
  _impl_.pocketid_ = value;
}
inline void EnvelopeModel::set_pocketid(int32_t value) {
  _internal_set_pocketid(value);
  // @@protoc_insertion_point(field_set:terragen.EnvelopeModel.PocketId)
}

// int32 PocketsCount = 3;
inline void EnvelopeModel::clear_pocketscount() {
  _impl_.pocketscount_ = 0;
}
inline int32_t EnvelopeModel::_internal_pocketscount() const {
  return _impl_.pocketscount_;
}
inline int32_t EnvelopeModel::pocketscount() const {
  // @@protoc_insertion_point(field_get:terragen.EnvelopeModel.PocketsCount)
  return _internal_pocketscount();
}
inline void EnvelopeModel::_internal_set_pocketscount(int32_t value) {
  
  _impl_.pocketscount_ = value;
}
inline void EnvelopeModel::set_pocketscount(int32_t value) {
  _internal_set_pocketscount(value);
  // @@protoc_insertion_point(field_set:terragen.EnvelopeModel.PocketsCount)
}

// .terragen.MessageType Type = 4;
inline void EnvelopeModel::clear_type() {
  _impl_.type_ = 0;
}
inline ::terragen::MessageType EnvelopeModel::_internal_type() const {
  return static_cast< ::terragen::MessageType >(_impl_.type_);
}
inline ::terragen::MessageType EnvelopeModel::type() const {
  // @@protoc_insertion_point(field_get:terragen.EnvelopeModel.Type)
  return _internal_type();
}
inline void EnvelopeModel::_internal_set_type(::terragen::MessageType value) {
  
  _impl_.type_ = value;
}
inline void EnvelopeModel::set_type(::terragen::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:terragen.EnvelopeModel.Type)
}

// bytes PayLoad = 5;
inline void EnvelopeModel::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& EnvelopeModel::payload() const {
  // @@protoc_insertion_point(field_get:terragen.EnvelopeModel.PayLoad)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnvelopeModel::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:terragen.EnvelopeModel.PayLoad)
}
inline std::string* EnvelopeModel::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:terragen.EnvelopeModel.PayLoad)
  return _s;
}
inline const std::string& EnvelopeModel::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void EnvelopeModel::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* EnvelopeModel::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* EnvelopeModel::release_payload() {
  // @@protoc_insertion_point(field_release:terragen.EnvelopeModel.PayLoad)
  return _impl_.payload_.Release();
}
inline void EnvelopeModel::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:terragen.EnvelopeModel.PayLoad)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace terragen

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::terragen::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::terragen::MessageType>() {
  return ::terragen::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EnvelopeModel_2eproto
